import crc32 from "crc/crc32";

import { sanitizePath } from "@appril/dev-utils";

import type { RouteOptions, PathToken } from "./types";

export { defaults } from "@appril/configs";
export * from "./types";

export const BANNER = `/**
* @generated by @appril/dev; do not modify manually!
*/`;

export function normalizeRoutePath(path: string): string {
  return sanitizePath(path)
    .replace(/\/+/g, "/")
    .replace(/^\/|\/$/g, "");
}

export function pathTokensFactory(
  path: string,
  file: string,
): Array<PathToken> {
  // use only normalized paths here

  const requiredParamRegex = /^\[([^\]]+)\]$/;
  const optionalParamRegex = /^\[\[([^\]]+)\]\]$/;
  const restParamRegex = /^\[\.\.\.([^\]]+)\]$/;

  return path.split("/").map((orig, i) => {
    const [base, ext = ""] = orig.split(/(\.([\w\d-]+)$)/);

    let param: PathToken["param"] | undefined;

    const paramSplitter = (regex: RegExp): { name: string } => {
      const name = base.replace(regex, "$1");

      if (!name) {
        throw new Error(`Invalid path in ${file}\n${path}`);
      }

      return {
        name,
      };
    };

    if (base.startsWith("[")) {
      // order is highly important!
      if (restParamRegex.test(base)) {
        param = {
          ...paramSplitter(restParamRegex),
          isRest: true,
          isOpt: false,
        };
      } else if (optionalParamRegex.test(base)) {
        param = {
          ...paramSplitter(optionalParamRegex),
          isRest: false,
          isOpt: true,
        };
      } else if (requiredParamRegex.test(base)) {
        param = {
          ...paramSplitter(requiredParamRegex),
          isRest: false,
          isOpt: false,
        };
      }
    }

    if (param && i === 0) {
      throw new Error(`Path should not start with a param - ${path}`);
    }

    return {
      orig,
      base,
      ext,
      param,
    } satisfies PathToken;
  });
}

export function routeAlias(opt: RouteOptions | undefined): Array<string> {
  if (typeof opt?.alias === "string") {
    return [opt.alias];
  }

  if (Array.isArray(opt?.alias)) {
    return opt.alias;
  }

  return [];
}

export function importNameFromPath(path: string): string {
  return [
    path
      .split(/\[/)[0]
      .replace(/^\W+|\W+$/g, "")
      .replace(/\W+/g, "_"),
    crc32(path),
  ].join("_");
}

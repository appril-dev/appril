import { sanitizePath } from "@appril/dev-utils";

import type { RouteSection } from "./@types";

export * from "./@types";
export * from "./defaults";

export const BANNER = `/**
* @generated by @appril/dev; do not modify manually!
*/`;

export function normalizeRoutePath(path: string): string {
  return sanitizePath(path)
    .replace(/\/+/g, "/")
    .replace(/^\/|\/$/g, "");
}

export function routeSections(path: string): Array<RouteSection> {
  // use only normalized paths here

  const requiredParamRegex = /^\[([\w\d-]+)\]$/;
  const optionalParamRegex = /^\[\[([\w\d-]+)\]\]$/;
  const restParamRegex = /^\[\.\.\.([\w\d-]+)]$/;

  return path.split("/").map((e, i) => {
    const [base, ext] = e.split(/(\.([\w\d-]+)$)/);

    let param: RouteSection["param"] | undefined;

    if (base.startsWith("[")) {
      if (requiredParamRegex.test(base)) {
        param = { name: base.replace(requiredParamRegex, "$1") };
      } else if (optionalParamRegex.test(base)) {
        param = { name: base.replace(optionalParamRegex, "$1"), isOpt: true };
      } else if (restParamRegex.test(base)) {
        param = { name: base.replace(restParamRegex, "$1"), isRest: true };
      }
    }

    if (param && i === 0) {
      throw new Error(`Path should not start with a param - ${path}`);
    }

    return {
      orig: e,
      base,
      ext: ext || "",
      param,
    } satisfies RouteSection;
  });
}

export function httpMethodByApi(apiMethod: string): string {
  return apiMethod === "del" ? "DELETE" : apiMethod.toUpperCase();
}

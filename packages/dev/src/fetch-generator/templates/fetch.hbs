import {
  baseurl, apiurl,
  fetchFactory, fetchOptions,
  join, withLoader, pathMaker,
} from "{{importPathBase}}";

{{#each typeDeclarations}}{{text}}
{{/each}}

function apiFactory(
  api: import("@appril/fetch").FetchMapper,
) {

  {{#each fetchDefinitions}}
  function {{method}}(
    params: [ {{../route.fetchParamsType}} ],
    payload{{#unless payloadType}}?{{/unless}}: import("{{../importPathBase}}").MaybeRef<
      {{#if payloadType}}
      {{payloadType}}
      {{else}}
      Record<string|number, unknown>
      {{/if}}
    >,
  ): Promise<
    {{#if bodyType}}
    {{bodyType}}
    {{else}}
    unknown
    {{/if}}
  > {
    return api.{{method}}(
      pathMaker("{{route.originalPath}}", params),
      payload || {},
    )
  }

  {{/each}}

  return {
    {{#each fetchDefinitions}}
    {{method}},
    {{/each}}
  }
}

export function createApi(
  options?: import("@appril/fetch").Options,
) {
  return apiFactory(
    fetchFactory(
      join(baseurl, apiurl),
      { ...fetchOptions, ...options },
    )
  )
}

export const fetch = createApi()

{{#each fetchDefinitions}}
export const {{method}} = fetch.{{method}};
{{/each}}

export { withLoader };

export default {
  {{#each fetchDefinitions}}
  {{method}}: fetch.{{method}},
  {{/each}}
  createApi,
  fetch,
  withLoader,
  resolve(params: [ {{route.fetchParamsType}} ]) {
    return join(baseurl, apiurl, pathMaker("{{route.originalPath}}", params))
  },
};

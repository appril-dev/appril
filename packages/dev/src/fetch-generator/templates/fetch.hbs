import {
  type HostOpt,
  createHost,
  stringify,
  join,
} from "@appril/api/lib";

import fetchFactory from "@appril/fetch";

import { baseurl, apiurl } from "{{importPathmap.config}}";
import { unref } from "{{importPathmap.fetchFile}}";

{{#each typeDeclarations}}{{text}}
{{/each}}

type {{route.fetchParams.id}} = [ {{route.fetchParams.literal}} ];

function formatPath(params: {{route.fetchParams.id}}) {
  const copy = [ ...params ]
  return [
  {{#each route.pathTokens}}
    {{#if param}}
    copy.splice(0, 1)[0],
    {{else}}
    "{{orig}}",
    {{/if}}
  {{/each}}
  ].join("/")
}

function fetchMapper(
  api: import("@appril/fetch").FetchMapper,
) {
  {{#each routeSpecSignatures}}
  function {{apiMethod}}(
    params: {{../route.fetchParams.id}},
    payload{{#unless payloadType}}?{{/unless}}: import(
      "{{../importPathmap.fetchFile}}"
    ).MaybeRef<
      {{#if payloadType}}
      {{payloadType.text}}
      {{else}}
      Record<string, unknown>
      {{/if}}
    >,
  ): Promise<
    {{#if responseType}}
    {{responseType.text}}
    {{else}}
    unknown
    {{/if}}
  > {
    return api.{{apiMethod}}(
      formatPath(params),
      unref(payload || {}),
    )
  }

  {{/each}}

  return {
    {{#each routeSpecSignatures}}
    {{apiMethod}},
    {{/each}}
  }
}

export const fetch = fetchMapper(
  fetchFactory(baseurl)
)

{{#each routeSpecSignatures}}
export const {{apiMethod}} = fetch.{{apiMethod}};
{{/each}}

export const resolve = (
  params: {{route.fetchParams.id}},
  query?: Record<string, unknown>,
) => {
  const path = join(
    baseurl,
    {{#if base}}"{{base}}"{{else}}apiurl{{/if}},
    formatPath(params)
  );
  return query
    ? [ path, stringify(query) ].join("?")
    : path;
}

export const href = (
  host: HostOpt,
  params: {{route.fetchParams.id}},
  query?: Record<string, unknown>,
) => createHost(host) + resolve(params, query);

export default {
  {{#each routeSpecSignatures}}
  {{apiMethod}}: fetch.{{apiMethod}},
  {{/each}}
  fetch,
  resolve,
  href,
};

import {
  type HostOpt,
  createHost,
  stringify,
  join,
} from "@appril/api/lib";

import fetchFactory from "@appril/fetch";

import { baseurl, apiurl } from "{{importPathmap.config}}";
import { unref } from "{{importPathmap.fetchFile}}";

{{#each typeDeclarations}}{{text}}
{{/each}}

type {{route.fetchParams.id}} = [ {{route.fetchParams.literal}} ];

function formatPath(params: {{route.fetchParams.id}}): string {
  return [
{{#each route.fetchParams.tokens}}    "{{this}}",
{{/each}}
  ].reduce(
    (path, token, i) => path.replace(token, String(params[i] ?? "")),
    "{{route.originalPathParams}}"
  )
}

function fetchMapper(
  api: import("@appril/fetch").FetchMapper,
) {
  {{#each fetchDefinitions}}
  function {{method}}(
    params: {{../route.fetchParams.id}},
    payload{{#unless payloadType}}?{{/unless}}: import(
      "{{../importPathmap.fetchFile}}"
    ).MaybeRef<
      {{#if payloadType}}
      {{payloadType}}
      {{else}}
      Record<string, unknown>
      {{/if}}
    >,
  ): Promise<
    {{#if bodyType}}
    {{bodyType}}
    {{else}}
    unknown
    {{/if}}
  > {
    return api.{{method}}(
      formatPath(params),
      unref(payload || {}),
    )
  }

  {{/each}}

  return {
    {{#each fetchDefinitions}}
    {{method}},
    {{/each}}
  }
}

export const fetch = fetchMapper(
  fetchFactory(baseurl)
)

{{#each fetchDefinitions}}
export const {{method}} = fetch.{{method}};
{{/each}}

export const resolve = (
  params: {{route.fetchParams.id}},
  query?: Record<string, unknown>,
) => {
  const path = join(
    baseurl,
    {{#if base}}"{{base}}"{{else}}apiurl{{/if}},
    formatPath(params)
  );
  return query
    ? [ path, stringify(query) ].join("?")
    : path;
}

export const href = (
  host: HostOpt,
  params: {{route.fetchParams.id}},
  query?: Record<string, unknown>,
) => createHost(host) + resolve(params, query);

export default {
  {{#each fetchDefinitions}}
  {{method}}: fetch.{{method}},
  {{/each}}
  fetch,
  resolve,
  href,
};

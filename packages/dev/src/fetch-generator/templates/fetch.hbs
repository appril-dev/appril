import fetchFactory, { defaults } from "@appril/fetch";

import { formatPath, join } from "{{sourceFolder}}/{{defaults.varFetchDir}}/base";
import { baseurl, apiurl } from "{{sourceFolder}}/{{defaults.configDir}}";
import { unref } from "{{defaults.corePrefix}}/fetch";

{{#each typeDeclarations}}{{text}}
{{/each}}

function fetchMapper(
  api: import("@appril/fetch").FetchMapper,
) {

  {{#each fetchDefinitions}}
  function {{method}}(
    params: [ {{../route.fetchParamsType}} ],
    payload{{#unless payloadType}}?{{/unless}}: import("{{../defaults.corePrefix}}/fetch").MaybeRef<
      {{#if payloadType}}
      {{payloadType}}
      {{else}}
      Record<string, unknown>
      {{/if}}
    >,
  ): Promise<
    {{#if bodyType}}
    {{bodyType}}
    {{else}}
    unknown
    {{/if}}
  > {
    return api.{{method}}(
      formatPath("{{../route.originalPath}}", params),
      unref(payload || {}),
    )
  }

  {{/each}}

  return {
    {{#each fetchDefinitions}}
    {{method}},
    {{/each}}
  }
}

export const createFetch = (
  options?: import("@appril/fetch").Options,
) => {
  return fetchMapper(
    fetchFactory(
      join(baseurl, apiurl),
      options,
    )
  )
}

export const fetch = createFetch()

{{#each fetchDefinitions}}
export const {{method}} = fetch.{{method}};
{{/each}}

export const resolve = (
  params: [ {{route.fetchParamsType}} ],
  query?: Record<string, unknown>,
) => {
  const path = join(baseurl, apiurl, formatPath("{{route.originalPath}}", params));
  return query
    ? [ path, defaults.stringify(query) ].join("?")
    : path;
}

export const href = (
  _host: string | { hostname: string; port?: number; secure?: boolean },
  params: [ {{route.fetchParamsType}} ],
  query?: Record<string, unknown>,
) => {
  const host = typeof _host === "string"
    ? _host
    : [
        _host.secure ? "https://" : "http://",
        _host.hostname,
        _host.port ? `:${_host.port}` : "",
      ].join("");
  return host.replace(/\/+$/, "") + resolve(params, query);
}

export default {
  {{#each fetchDefinitions}}
  {{method}}: fetch.{{method}},
  {{/each}}
  createFetch,
  fetch,
  resolve,
  href,
};

import { use } from "@appril/api/router";

import { refineParams } from "{{importPathmap.lib}}/base";

{{#if importZodErrorHandlerFrom}}
import { zodErrorHandler } from "{{importZodErrorHandlerFrom}}";
{{else}}
import { fromZodError } from "zod-validation-error";
function zodErrorHandler(error: any) {
  return fromZodError(error, {
    prefix: null,
    issueSeparator: ";\n",
  })
};
{{/if}}

{{zodSchema}}

const validateParams = () => use((ctx, next) => {
  try {
    {{route.params.id}}Schema.parse(ctx.params)
  } catch (error: any) {
    throw zodErrorHandler(error)
  }
  return next()
})

const validatePayload = () => [
  {{#if zodSchema}}
  {{#each payloadTypes}}
  use<never, { payload: {} }>((ctx, next) => {
    try {
      {{id}}Schema.parse(ctx.payload)
    } catch (error: any) {
      throw zodErrorHandler(error)
    }
    return next()
  }).before("{{method}}"),
  {{/each}}
  {{/if}}
].flat()

{{#if zodErrors.length}}
console.error("\n[ \x1b[31m{{route.file}}\x1b[0m ]: failed building zod schema(s)")
{{#each zodErrors}}
console.error(`{{this}}`)
{{/each}}
{{/if}}

export default () => [
  refineParams({{paramsSchema}}),
  validateParams(),
  validatePayload(),
].flat()

import { type UseSpec, use } from "@appril/api";

{{#if importZodErrorHandlerFrom}}
import { zodErrorHandler } from "{{importZodErrorHandlerFrom}}";
{{else}}
import { fromZodError } from "zod-validation-error";
function zodErrorHandler(error: any) {
  return fromZodError(error, {
    prefix: null,
    issueSeparator: ";\n",
  })
};
{{/if}}

{{zodSchema}}

{{#if zodErrors.length}}
console.error("\n[ \x1b[31m{{route.file}}\x1b[0m ]: failed building zod schema(s)")
{{#each zodErrors}}
console.error(`{{this}}`)
{{/each}}
{{/if}}

const validateParams = [
  use<never, { params: Record<string, unknown> }>(
    (ctx, next) => {
      try {
        {{route.params.id}}Schema.parse(ctx.params)
      } catch (error: any) {
        throw zodErrorHandler(error)
      }
      return next()
    },
    { slot: "validate:params" },
  ) as unknown as UseSpec,
]

const validatePayload = [
  {{#if zodSchema}}
  use(
    (ctx, next) => {
      {{#each payloadTypes}}
      if (ctx.request.method === "{{method}}") {
        try {
          {{id}}Schema.parse(ctx.payload)
        } catch (error: any) {
          throw zodErrorHandler(error)
        }
      }
      {{/each}}
      return next()
    },
    { slot: "validate:payload" },
  ),
  {{/if}}
]

export default () => [
  validateParams,
  validatePayload,
].flat()

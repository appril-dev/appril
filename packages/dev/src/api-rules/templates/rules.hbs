{{#if importZodErrorHandlerFrom}}
import { zodErrorHandler } from "{{importZodErrorHandlerFrom}}";
{{else}}
import { fromZodError } from "zod-validation-error";
function zodErrorHandler(error: any) {
  return fromZodError(error, { prefix: null, issueSeparator: ";\n" })
};
{{/if}}

{{zodSchema}}

{{#if zodErrors.length}}
console.error("\n[ \x1b[31m{{route.file}}\x1b[0m ]: failed building zod schema(s)")
{{#each zodErrors}}
console.error(`{{this}}`)
{{/each}}
{{/if}}

const validateParams = (
  ctx: import("@appril/api").ParameterizedContext,
) => {
  try {
    const { params } = ctx as never;
    {{route.params.id}}Schema.parse(params)
  } catch (error) {
    throw zodErrorHandler(error)
  }
}

const validatePayload = {
  {{#if zodSchema}}
  {{#each payloadTypes}}
  {{apiMethod}}(
    ctx: import("@appril/api").ParameterizedContext,
  ) {
    try {
      {{id}}Schema.parse(ctx.payload)
    } catch (error) {
      throw zodErrorHandler(error)
    }
  },
  {{/each}}
  {{/if}}
}

const validateResponse = {
  {{#if zodSchema}}
  {{#each responseTypes}}
  {{apiMethod}}(
    ctx: import("@appril/api").ParameterizedContext,
  ) {
    try {
      {{id}}Schema.parse(ctx.body)
    } catch (error) {
      throw zodErrorHandler(error)
    }
  },
  {{/each}}
  {{/if}}
}

export const zodSchemas = {
  params: {{route.params.id}}Schema,
  payload: {
  {{#if zodSchema}}
  {{#each payloadTypes}}
    {{httpMethod}}: {{id}}Schema,
  {{/each}}
  {{/if}}
  },
  response: {
  {{#if zodSchema}}
  {{#each responseTypes}}
    {{httpMethod}}: {{id}}Schema,
  {{/each}}
  {{/if}}
  },
}

export default () => {
  return {
    params: validateParams,
    payload: validatePayload,
    response:  validateResponse,
  }
}

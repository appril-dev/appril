import { join } from "node:path";

import {
  type Meta, type RouteEndpoint,
  routeMapper,
} from "@appril/api/router";

import { baseurl, apiurl } from "{{importPathCfg}}";
import router from "{{importPathApi}}/router";

{{#each routes}}
import {{importName}} from "{{../importPathApi}}/{{importPath}}";
{{#unless optedFile}}
import {{importName}}$assets from "{{../importPathVar}}/{{importPath}}/@assets";
{{/unless}}

{{/each}}

type Exports = {
  endpoints: { endpoints: Array<RouteEndpoint> };
  router: { router: InstanceType<typeof import("@koa/router")> };
}

type RouteSetup = {
  path: string;
  originalPath: string;
  file: string;
  exports: Exports["endpoints"] | Exports["router"];
  meta?: Meta;
}

export type ApiRoute ={{#each routes}}  {{#unless @first}}| {{/unless}}"{{originalPath}}"
{{/each}}

export const routeStack: Array<RouteSetup> = [
{{#each routes}}
  {
    path: join(baseurl, {{#if base}}"{{base}}"{{else}}apiurl{{/if}}, "{{path}}"),
    originalPath: "{{originalPath}}",
    file: "{{file}}",
    {{#if meta}}
    meta: {{meta}},
    {{/if}}
    exports: Array.isArray({{importName}})
      ? {
          endpoints: routeMapper(
            {{importName}} as never,
            {{#unless optedFile}}{{importName}}$assets{{/unless}}
          )
        }
      : {{importName}} as Exports["router"],
  },
{{/each}}
]

for (const { path, originalPath, exports } of routeStack) {
  if ("endpoints" in exports) {
    for (const { method, middleware } of exports.endpoints) {
      router.register(
        path,
        [method],
        middleware as unknown as Array<import("koa__router").Middleware>,
        { name: originalPath },
      );
    }
  } else if ("router" in exports) {
    router.use(path, exports.router.routes())
  }
}

export default router.routes();

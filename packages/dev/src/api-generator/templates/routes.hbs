import { join } from "node:path";

import { type Meta, type RouteEndpoint, routeMapper } from "@appril/api/router";

import { baseurl, apiurl } from "{{importPathmap.config}}";
import router from "{{importPathmap.api}}/router";

{{#each routes}}
{{#if optedFile}}
import {{importName}} from "{{../importPathmap.api}}/{{importPath}}";
{{else}}
import "{{../importPathmap.api}}/{{importPath}}";
import {{importName}} from "{{../importPathmap.lib}}/{{importPath}}";
{{/if}}

{{/each}}

type RouteSetup = {
  path: string;
  originalPath: string;
  file: string;
  exports: Array<RouteEndpoint> | InstanceType<typeof import("@koa/router")>;
  meta?: Meta;
}

export type ApiRoute ={{#each routes}}  {{#unless @first}}| {{/unless}}"{{originalPath}}"
{{/each}}

export const routeStack: Array<RouteSetup> = [
{{#each routes}}
  {
    path: join(baseurl, {{#if base}}"{{base}}"{{else}}apiurl{{/if}}, "{{path}}"),
    originalPath: "{{originalPath}}",
    file: "{{file}}",
    {{#if meta}}
    meta: {{meta}},
    {{/if}}
    {{#if optedFile}}
    exports: {{importName}},
    {{else}}
    exports: routeMapper({{importName}}),
    {{/if}}
  },
{{/each}}
]

for (const { path, originalPath, exports } of routeStack) {
  {{#if optedFile}}
  router.use(path, exports.routes())
  {{else}}
  for (const { method, middleware } of exports as Array<RouteEndpoint>) {
    router.register(
      path.replace(/\+/g, "\\+"),
      [method],
      middleware as Array<never>,
      { name: originalPath },
    );
  }
  {{/if}}
}

export default router.routes();

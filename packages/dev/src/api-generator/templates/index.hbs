import api, {
  type DefaultState,
  type DefaultContext,
  type RouteSpecI,
  type RouteSpec,
  type UseSpecI,
  type UseSpec,
  type HTTPMethod,
  type Middleware,
} from "@appril/api";

import { routeMiddlewareMapper } from "@appril/api/lib";

import useGlobalFactory from "{{importPathmap.api}}/use";
import useRulesFactory from "./_rules";

type DefaultParamsT = {{route.params.literal}};

export const use: UseSpecI<
  DefaultState,
  DefaultContext & { params: DefaultParamsT }
> = api.use;

type Factory<
  ParamsT,
  StateT = DefaultState,
  ContextT = DefaultContext & { params: ParamsT }
> = (
  a: { use: UseSpecI<StateT, ContextT> } & Record<
    keyof Omit<typeof api, "use">,
    RouteSpecI<StateT, ContextT>
  >
) => Array<UseSpec<any, any> | RouteSpec<any, any>>;

export default <
  ParamsT extends DefaultParamsT = DefaultParamsT
>(factory: Factory<ParamsT>): Array<{
  method: HTTPMethod,
  middleware: Array<Middleware>
}> => routeMiddlewareMapper("{{route.file}}", {
  paramsSchema: {{paramsSchema}},
  factorySpecs: factory(api as never),
  useGlobalSpecs: [useGlobalFactory(), useRulesFactory()].flat(),
});

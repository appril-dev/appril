import api, {
  type DefaultState,
  type DefaultContext,
  type DefinitionI,
  type UseDefinitionI,
} from "@appril/api/router";

export { use } from "@appril/api/router";

type Factory<
  ParamsT,
  StateT = DefaultState,
  ContextT = DefaultContext & { params: ParamsT }
> = (
  a: { use: UseDefinitionI<StateT, ContextT> } & Record<
    {{#each apiMethods}}| "{{this}}"{{/each}},
    DefinitionI<StateT, ContextT>
  >
) => Array<any>

type DefaultParamsT = {{route.params.literal}}

export default <
  ParamsT extends DefaultParamsT = DefaultParamsT
>(
  factory: Factory<ParamsT>
) => factory(api)


{{#if importZodErrorHandlerFrom}}
import { zodErrorHandler } from "{{importZodErrorHandlerFrom}}";
{{else}}
import { fromZodError } from "zod-validation-error";
function zodErrorHandler(error: any) {
  return fromZodError(error, {
    prefix: null,
    issueSeparator: ";\n",
  })
};
{{/if}}

{{zodSchema}}

const paramsValidation: Array<import("koa").Middleware> = [
  (ctx, next) => {
    try {
      {{route.params.id}}Schema.parse(ctx.params)
    } catch (error: any) {
      throw zodErrorHandler(error)
    }
    return next()
  },
]

const payloadValidation: Array<[
  import("@appril/api/router").APIMethod,
  import("koa").Middleware
]> = [
  {{#if zodSchema}}
  {{#each payloadTypes}}
  [
    "{{method}}",
    (ctx, next) => {
      try {
        {{id}}Schema.parse(ctx.payload)
      } catch (error: any) {
        throw zodErrorHandler(error)
      }
      return next()
    }
  ],
  {{/each}}
  {{/if}}
]

{{#if zodErrors.length}}
console.error("\n[ \x1b[31m{{route.file}}\x1b[0m ]: failed building zod schema(s)")
{{#each zodErrors}}
console.error(`{{this}}`)
{{/each}}
{{/if}}

export default { paramsValidation, payloadValidation };

import {
  type HostOpt,
  createHost,
  stringify,
  join,
} from "@appril/api/lib";

import { baseurl } from "{{importPathmap.config}}";

export type LinkProps =
  {{#each pages}}
  | [ "{{originalPath}}", {{params.literal}} ]
  {{/each}}

export const resolvers = {
  {{#each pages}}
  "{{originalPath}}": () => {
    type ParamsT = [ {{params.literal}} ];
    type QueryT = Record<string, unknown>;

    const formatPath = (params: ParamsT) => {
      const copy = [ ...params ]
      return [
      {{#each pathTokens}}
        {{#if param}}
        copy.splice(0, 1)[0],
        {{else}}
        "{{orig}}",
        {{/if}}
      {{/each}}
      ].join("/")
    }

    const resolve = (
      params: ParamsT,
      query?: QueryT,
    ) => {
      const path = join(
        baseurl,
        formatPath(params),
      )
      return query
        ? [ path, stringify(query) ].join("?")
        : path;
    }

    return {
      formatPath,
      resolve,
      href: (
        host: HostOpt,
        params: ParamsT,
        query?: QueryT,
      ) => createHost(host) + resolve(params, query),
    }
  },
  {{/each}}
}

export const linkReplcements = {
{{#each pages}}
  "{{originalPath}}": resolvers["{{originalPath}}"]().formatPath,
{{/each}}
}

export default {
{{#each pages}}  "{{originalPath}}": resolvers["{{originalPath}}"](),
{{#each alias}}  "{{this}}": resolvers["{{../originalPath}}"](),
{{/each}}
{{/each}}
}

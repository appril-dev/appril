import api, {
  type DefaultState,
  type DefaultContext,
  type ParameterizedContext,
  type Middleware,
  type UseOpt,
  type UseSpec,
  type RouteSpec,
} from "@appril/api";

import type { QueryBuilder } from "@appril/dbxt";
import type { Knex } from "knex";

export const config = {
  primaryKey: "id",
  itemsPerPage: 25,
};

export default <TableName extends Knex.TableNames, ColumnT>(
  dbxt: QueryBuilder<TableName>,
  columns: readonly ColumnT[],
  opt: {
    primaryKey?: string;
    returning?: readonly ColumnT[];
    returningExclude?: readonly ColumnT[];
  },
) => {
  type CrudContext<WorkerPayloadT = unknown, WorkerReturnT = unknown> = {
    readonly dbxt: QueryBuilder<TableName>;
    readonly queryBuilder: QueryBuilder<TableName>;
    readonly primaryKey: string;
    worker: WorkerPayloadT extends object
      ? (payload: WorkerPayloadT) => Promise<WorkerReturnT>
      : () => Promise<WorkerReturnT>;
  };

  type WrapperContext<
    StateT,
    ContextT,
    ParamsT,
    WorkerPayloadT = unknown,
    WorkerReturnT = unknown,
    ResponseBodyT = WorkerReturnT,
  > = ParameterizedContext<
    DefaultState & StateT,
    DefaultContext &
      ContextT & {
        params: ParamsT;
        crud: CrudContext<WorkerPayloadT, WorkerReturnT>;
      },
    ResponseBodyT
  >;

  interface Wrapper<ParamsT, WorkerPayloadT, WorkerReturnT> {
    <StateT = object, ContextT = object, ResponseBodyT = WorkerReturnT>(
      handler: Middleware<
        StateT,
        WrapperContext<
          StateT,
          ContextT,
          ParamsT,
          WorkerPayloadT,
          WorkerReturnT,
          ResponseBodyT
        >,
        ResponseBodyT
      >,
    ): RouteSpec;
    <StateT = object, ContextT = object, ResponseBodyT = WorkerReturnT>(
      handler: Array<
        Middleware<
          StateT,
          WrapperContext<
            StateT,
            ContextT,
            ParamsT,
            WorkerPayloadT,
            WorkerReturnT,
            ResponseBodyT
          >,
          ResponseBodyT
        >
      >,
    ): RouteSpec;
  }

  interface UseWrapper<ParamsT> {
    <
      StateT = object,
      ContextT = object,
      T = Middleware<StateT, WrapperContext<StateT, ContextT, ParamsT>>,
    >(
      use: T | Array<T>,
    ): UseSpec;
    <
      StateT = object,
      ContextT = object,
      T = Middleware<StateT, WrapperContext<StateT, ContextT, ParamsT>>,
    >(
      use: T | Array<T>,
      opt?: UseOpt,
    ): UseSpec;
  }

  function useWrapper<ParamsT>(): UseWrapper<ParamsT> {
    return (use, opt?: UseOpt) => {
      return api.use(
        [initMiddleware(async () => {}), use].flat() as Array<never>,
        opt,
      );
    };
  }

  function createWrapper<ParamsT, WorkerPayloadT, WorkerReturnT>(): Wrapper<
    ParamsT,
    WorkerPayloadT,
    WorkerReturnT
  > {
    return (handler) => {
      return api.definitionFactory("post", [
        initMiddleware(async function (
          this: WrapperContext<
            DefaultState,
            DefaultContext,
            ParamsT,
            WorkerPayloadT,
            WorkerReturnT
          >,
          data,
        ) {
          const [item] = await this.crud.dbxt
            .insert(data)
            .returning(returning as []);
          return item;
        }),
        handler,
      ] as Array<never>);
    };
  }

  function updateWrapper<ParamsT, WorkerPayloadT, WorkerReturnT>(): Wrapper<
    ParamsT,
    WorkerPayloadT,
    WorkerReturnT
  > {
    return (handler) => {
      return api.definitionFactory("patch", [
        initMiddleware(async function (
          this: WrapperContext<
            DefaultState,
            DefaultContext,
            ParamsT,
            WorkerPayloadT,
            WorkerReturnT
          >,
          data,
        ) {
          const updates = Object.entries(data).reduce(
            (map: Record<string, unknown>, [k, v]) => {
              if (v !== undefined) {
                map[k] = v;
              }
              return map;
            },
            {},
          );

          const { id } = this.params as { id: number };

          const [item] = Object.keys(updates).length
            ? await this.crud.queryBuilder
                .where(primaryKey as string, id)
                .update(data)
                .returning(returning as [])
            : await this.crud.dbxt
                .where(primaryKey as string, id)
                .select(returning);

          this.assert(item, 404);

          return item;
        }),
        handler,
      ] as Array<never>);
    };
  }

  function deleteWrapper<ParamsT, WorkerPayloadT, WorkerReturnT>(): Wrapper<
    ParamsT,
    WorkerPayloadT,
    WorkerReturnT
  > {
    return (handler) => {
      return api.definitionFactory("del", [
        initMiddleware(async function (
          this: WrapperContext<
            DefaultState,
            DefaultContext,
            ParamsT,
            WorkerPayloadT,
            WorkerReturnT
          >,
        ) {
          const { id } = this.params as { id: number };

          const [item] = await this.crud.queryBuilder
            .where(primaryKey as string, id)
            .delete()
            .returning(returning as []);

          this.assert(item, 404);

          return item;
        }),
        handler,
      ] as Array<never>);
    };
  }

  function retrieveWrapper<ParamsT, WorkerPayloadT, WorkerReturnT>(): Wrapper<
    ParamsT,
    WorkerPayloadT,
    WorkerReturnT
  > {
    return (handler) => {
      return api.definitionFactory("get", [
        initMiddleware(async function (
          this: WrapperContext<
            DefaultState,
            DefaultContext,
            ParamsT,
            WorkerPayloadT,
            WorkerReturnT
          >,
        ) {
          const { id } = this.params as { id: number };

          const item = await this.crud.queryBuilder
            .where(primaryKey as string, id)
            .first(returning);

          this.assert(item, 404);

          return item;
        }),
        handler,
      ] as Array<never>);
    };
  }

  function listWrapper<ParamsT, WorkerPayloadT, WorkerReturnT>(): Wrapper<
    ParamsT,
    WorkerPayloadT,
    WorkerReturnT
  > {
    return (handler) => {
      return api.definitionFactory("get", [
        initMiddleware(async function (
          this: WrapperContext<
            DefaultState,
            DefaultContext,
            ParamsT,
            WorkerPayloadT,
            WorkerReturnT
          >,
        ) {
          let { itemsPerPage } = config;

          if (
            this.query["pager:items_per_page"]
              ? Number.isFinite(+this.query["pager:items_per_page"])
              : false
          ) {
            itemsPerPage = Number(this.query["pager:items_per_page"]);
          }

          const itemsTotal = await this.crud.queryBuilder.clone().countRows();
          const totalPages = Math.ceil(itemsTotal / itemsPerPage);

          let currentPage = 0;

          if (
            this.query["pager:page"]
              ? Number.isFinite(+this.query["pager:page"])
              : false
          ) {
            currentPage = Number(this.query["pager:page"]);
          }

          if (currentPage < 1) {
            currentPage = 1;
          }

          if (currentPage > totalPages) {
            currentPage = totalPages;
          }

          let offset = (currentPage - 1) * itemsPerPage;

          if (offset < 0) {
            offset = 0;
          }

          const items = await this.crud.queryBuilder
            .select(returning)
            .offset(offset)
            .limit(itemsPerPage);

          return {
            items,
            itemsTotal,
          };
        }),
        handler,
      ] as Array<never>);
    };
  }

  const { primaryKey } = {
    ...config,
    ...opt,
  } as { primaryKey: ColumnT; itemsPerPage: number; sidePages: number };

  let returning: readonly ColumnT[] | "*" = "*";

  if (opt.returning) {
    returning = [
      opt.returning,
      opt.returning.includes(primaryKey) ? [] : [primaryKey],
    ].flat();
  } else if (opt.returningExclude?.length) {
    returning = columns.filter((e) => {
      return e === primaryKey ? true : !opt.returningExclude?.includes(e);
    });
  }

  type GenericWorker = (...args: Array<never>) => Promise<unknown>;

  const crudContext = (
    worker: GenericWorker,
  ): Record<keyof CrudContext, PropertyDescriptor> => {
    return {
      worker: {
        value: worker,
        enumerable: true,
      },
      dbxt: {
        get() {
          return dbxt;
        },
        enumerable: true,
      },
      queryBuilder: {
        get: dbxt.clone,
        enumerable: true,
      },
      primaryKey: {
        value: primaryKey,
        enumerable: true,
      },
    };
  };

  const ctxExtend = (worker: GenericWorker) => {
    return { crud: Object.defineProperties({}, crudContext(worker)) };
  };

  const initMiddleware = (worker: GenericWorker): Middleware => {
    return (ctx, next) => {
      for (const [key, value] of Object.entries(ctxExtend(worker.bind(ctx)))) {
        key in ctx ||
          Object.defineProperty(ctx, key, {
            value,
            configurable: false,
            writable: false,
            enumerable: true,
          });
      }
      return next();
    };
  };

  return {
    useWrapper,
    createWrapper,
    updateWrapper,
    deleteWrapper,
    retrieveWrapper,
    listWrapper,
  };
};

import { routeMiddlewareMapper } from "@appril/api/lib";

import useFactory from "{{importPathmap.api}}/use";
import rulesFactory from "../[id]/_rules";
import { paramsSchema } from "../[id]";

import {
  useWrapper,
  retrieveWrapper,
  updateWrapper,
  deleteWrapper,
} from ".";

import type {
  RetrieveResponse,
  UpdatePayload,
  UpdateResponse,
  DeleteResponse,
} from "./typeLiterals";

export { head, options, post, put } from "@appril/api";
export * from "./typeLiterals";

type DefaultParamsT = { id: number | string }

export const use = useWrapper<DefaultParamsT>();

export const get = retrieveWrapper<
  DefaultParamsT,
  unknown,
  RetrieveResponse
>();

export const patch = updateWrapper<
  DefaultParamsT,
  UpdatePayload,
  UpdateResponse
>();

export const del = deleteWrapper<
  DefaultParamsT,
  unknown,
  DeleteResponse
>();

type Factory<ParamsT> = (a: {
  use: ReturnType<typeof useWrapper<ParamsT>>;
  get: ReturnType<
    typeof retrieveWrapper<ParamsT, unknown, RetrieveResponse>
  >;
  patch: ReturnType<
    typeof updateWrapper<ParamsT, UpdatePayload, UpdateResponse>
  >;
  del: ReturnType<
    typeof deleteWrapper<ParamsT, unknown, DeleteResponse>
  >;
}) => Array<any>;

export default <
  ParamsT extends DefaultParamsT = DefaultParamsT
>(
  factory: Factory<ParamsT>
) => routeMiddlewareMapper("{{table.name}}/[id]", {
  paramsSchema,
  specs: factory({ use, get, patch, del }),
  useSpecs: useFactory(),
  rules: rulesFactory(),
});

import { routeMiddlewareMapper } from "@appril/api/lib";

import { paramsSchema, useGlobalSpecs } from "../[id]";

import {
  type RecordT,
  type UpdateT,
  useWrapper,
  retrieveWrapper,
  updateWrapper,
  deleteWrapper,
} from ".";

export { head, options, post, put } from "@appril/api";

export * from "./typeLiterals";

type DefaultParamsT = { id: number | string }

export const use = useWrapper<DefaultParamsT>()

export const get = retrieveWrapper<
  DefaultParamsT,
  () => Promise<RecordT>
>()

export const patch = updateWrapper<
  DefaultParamsT,
  (payload: UpdateT) => Promise<RecordT>
>()

export const del = deleteWrapper<
  DefaultParamsT,
  () => Promise<RecordT>
>()

type Factory<
  ParamsT
> = (a: {
  use: ReturnType<typeof useWrapper<ParamsT>>;
  get: ReturnType<typeof retrieveWrapper<ParamsT, () => Promise<RecordT>>>;
  patch: ReturnType<typeof updateWrapper<ParamsT, (p: UpdateT) => Promise<RecordT>>>;
  del: ReturnType<typeof deleteWrapper<ParamsT, () => Promise<RecordT>>>;
}) => Array<any>

export default <
  ParamsT extends DefaultParamsT = DefaultParamsT
>(
  factory: Factory<ParamsT>
) => routeMiddlewareMapper("{{route.file}}", {
  paramsSchema,
  factorySpecs: factory({ use, get, patch, del }),
  useGlobalSpecs: useGlobalSpecs(),
});

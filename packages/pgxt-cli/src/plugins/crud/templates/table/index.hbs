import { routeMiddlewareMapper } from "@appril/api/lib";

import tableInit from "{{importPathmap.table}}";
import useFactory from "{{importPathmap.api}}/use";
import rulesFactory from "../_rules";
import { paramsSchema } from "..";

import crudFactory from "{{importPathmap.libCrud}}";

import type {
  ListResponse,
  CreatePayload,
  CreateResponse,
} from "./typeLiterals";

export { head, options, patch, put, del } from "@appril/api";
export * from "./typeLiterals";

export const columns = [
{{#each columns}}  "{{name}}",
{{/each}}
] as const;

export type ColumnT =
{{#each columns}}  | "{{name}}"
{{/each}};

export const {
  useWrapper,
  createWrapper,
  updateWrapper,
  deleteWrapper,
  retrieveWrapper,
  listWrapper,
} = crudFactory<
  "{{table.moduleName}}",
  ColumnT
>(
  tableInit(),
  columns,
  {
    primaryKey: "{{table.primaryKey}}",
    {{#if returning}}
    returning: {{returning}},
    {{/if}}
    {{#if returningExclude}}
    returningExclude: {{returningExclude}},
    {{/if}}
  },
)

type ParamsT = {}

export const use = useWrapper<ParamsT>();

export const get = listWrapper<ParamsT, unknown, ListResponse>();

export const post = createWrapper<ParamsT, CreatePayload, CreateResponse>();

export default (
  factory: (a: {
    use: typeof use;
    get: typeof get;
    post: typeof post;
  }) => Array<any>
) => routeMiddlewareMapper("{{table.name}}/index", {
  paramsSchema,
  specs: factory({ use, get, post }),
  useSpecs: useFactory(),
  rules: rulesFactory(),
});

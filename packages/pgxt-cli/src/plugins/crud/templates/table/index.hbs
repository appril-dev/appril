import { routeMiddlewareMapper } from "@appril/api/lib";

import tableInit from "{{importPathmap.table}}";
import { paramsSchema, useGlobalSpecs } from "{{importPathmap.tableApi}}";

import crudFactory from "..";
import type { RecordT, InsertT } from "./typeLiterals";

export { head, options, patch, put, del } from "@appril/api";
export * from "./typeLiterals";

export const columns = [
{{#each table.columns}}  "{{name}}",
{{/each}}
] as const;

export type ColumnT =
{{#each table.columns}}  | "{{name}}"
{{/each}};

export const {
  useWrapper,
  createWrapper,
  updateWrapper,
  deleteWrapper,
  retrieveWrapper,
  listWrapper,
} = crudFactory<
  "{{table.moduleName}}",
  ColumnT
>(
  tableInit(),
  columns,
  {
    primaryKey: "{{table.primaryKey}}",
  },
)

type ParamsT = {}

export const use = useWrapper<ParamsT>()

export const get = listWrapper<
  ParamsT,
  () => Promise<Array<RecordT>>
>()

export const post = createWrapper<
  ParamsT,
  (payload: InsertT) => Promise<RecordT>
>()

export default (
  factory: (a: {
    use: typeof use;
    get: typeof get;
    post: typeof post;
  }) => Array<any>
) => routeMiddlewareMapper("{{route.file}}", {
  paramsSchema,
  factorySpecs: factory({ use, get, post }),
  useGlobalSpecs: useGlobalSpecs(),
});

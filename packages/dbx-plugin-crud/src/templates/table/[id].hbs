import {
  type DefaultState,
  type UseScope,
  definitionFactory,
  useDefinitionFactory,
} from "@appril/api/router";

import type {
  CrudContext,
  HandlerContext,
  Wrapper,
  UseWrapper,
} from "..";

import { type ColumnT, initMiddleware, middlewareFactory } from ".";

type ContextT = HandlerContext<
  DefaultState,
  CrudContext<"{{table.moduleName}}", ColumnT> & { params: { id: string } }
>;

export * from "./typeLiterals";

export const use: UseWrapper<
  DefaultState,
  ContextT
> = (...a: Array<unknown>) => useDefinitionFactory<UseScope>([[
  initMiddleware,
  ...a
]]);

export const get: Wrapper<DefaultState, ContextT> = (handler) => definitionFactory(
  "get",
  middlewareFactory.retrieveHandler(handler as never),
)

export const patch: Wrapper<DefaultState, ContextT> = (handler) => definitionFactory(
  "patch",
  middlewareFactory.updateHandler(handler as never),
)

export const del: Wrapper<DefaultState, ContextT> = (handler) => definitionFactory(
  "del",
  middlewareFactory.deleteHandler(handler as never),
)

import {
  type DefaultState,
  type Middleware,
  type UseScope,
  useDefinitionFactory,
} from "@appril/api/router";

import dbx from "{{dbxImportPath}}";

import handlersFactory, {
  type Context,
  type Handler,
  type Wrapper,
  type UseWrapper,
} from "..";

export const columns = [ {{#each table.columns}}"{{name}}", {{/each}} ] as const;

export type ColumnsT = typeof columns[number]
export type ContextT = Context<"{{table.moduleName}}", ColumnsT>;
export type HandlerT = Handler<DefaultState, ContextT>;
export type WrapperT = Wrapper<DefaultState, ContextT>;
export type UseWrapperT = UseWrapper<DefaultState, ContextT>;

export const handlers = handlersFactory<
  "{{table.moduleName}}",
  ColumnsT
>(
  dbx,
  columns,
  {
    primaryKey: "{{table.primaryKey}}",
  },
)

export const use: UseWrapperT = (...a: Array<unknown>) => useDefinitionFactory<UseScope>([[
  handlers.initHandler,
  ...a
]]);

export const middlewareFactory = (
  handler: HandlerT,
  handlerName: keyof typeof handlers,
): Array<Middleware<DefaultState, ContextT>> => {
  return [
    handlers.initHandler,
    async (ctx, next) => {
      ctx.body = await handler(
        ctx,
        ctx.payload as never,
        (payload) => handlers[handlerName](ctx, payload as never),
      )
      return next()
    },
  ]
}
